<?xml version="1.0" encoding="utf-8"?>
<AnalysisDefinition>
  <Name>EventAndEye</Name>
  <Script>
    readme.writeLine(&quot;Name:\t&quot; + name);
    readme.writeLine(&quot;Started:\t&quot; +startTime);
    readme.writeLine(&quot;Ended:\t&quot; +endTime);
    readme.writeLine(&quot;Run Number:\t&quot; + runNumber);
    readme.writeLine(&quot;-----Notes-----&quot;);
    readme.writeLine(notes);
  </Script>
  <Tool type="File">
    <Name>readme</Name>
    <FileName>.readme.txt</FileName>
  </Tool>
  <Period>
    <Name>TestPeriod</Name>
    <Script>
      for(i=0;i&lt;eye.length;i++)
      {
      eyeFile.writeLine(&quot;&quot;+(Number(periodNumber)+1)
                        +&quot;,&quot;+correctTrialNum.value
                        +&quot;,&quot;+String( Math.round( 1000*(Number(eye.time.value(i))-Number(startTime)) ))
                        +&quot;,&quot;+Math.round(eye.data.value(0,i))
                        +&quot;,&quot;+Math.round(eye.data.value(1,i))
      );
      if(correct.length)
      eyeFileCorrect.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+String( Math.round( 1000*(Number(eye.time.value(i))-Number(startTime)) ))
      +&quot;,&quot;+Math.round(eye.data.value(0,i))
      +&quot;,&quot;+Math.round(eye.data.value(1,i))
      );
      }
      for(i=0;i&lt;diam.length;i++)
      {
      diamFile.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+String( Math.round( 1000*(Number(diam.time.value(i))-Number(startTime)) ))
      +&quot;,&quot;+Math.round(diam.data.value(0,i))
      +&quot;,&quot;+Math.round(diam.data.value(1,i))
      );
      if(correct.length)
      diamFileCorrect.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+String( Math.round( 1000*(Number(diam.time.value(i))-Number(startTime)) ))
      +&quot;,&quot;+Math.round(diam.data.value(0,i))
      +&quot;,&quot;+Math.round(diam.data.value(1,i))
      );
      }
      for(i=0;i&lt;Event.length;i++)
      {
      eventFile.writeLine(Event.data.value(i)+&quot;,&quot;+String(Math.round(1000*(Number(Event.time.value(i))-(Number(startTime))))));
      if(correct.length)
      eventFileCorrect.writeLine(Event.data.value(i)+&quot;,&quot;+String(Math.round(1000*(Number(Event.time.value(i))-(Number(startTime))))));
      }
      for(i=0;i&lt;Blob.length;i++)
      {
      blobFile.writeLine(Blob.data.value(i));
      if(correct.length)
      blobFileCorrect.writeLine(Blob.data.value(i));
      }
      if(correct.length)
        correctTrialNum.value++;
    </Script>
    <StartTrigger type="Element">
      <Name>start</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::Trial</ElementPath>
    </StartTrigger>
    <EndTrigger type="Element">
      <Name>end</Name>
      <When>Ends</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::ReshuffleTrialType</ElementPath>
    </EndTrigger>
    <EndTrigger type="Element">
      <Name>end</Name>
      <When>Ends</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::NeedsMoreTrials</ElementPath>
    </EndTrigger>
    <Trigger type="Element">
      <Name>correct</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::NeedsMoreTrials</ElementPath>
    </Trigger>
    <Trigger type="Property">
      <Name>Event</Name>
      <PropertyPath>ProbabilityTracking::Top::EventInfo::Values</PropertyPath>
      <DataSource type="Property">
        <Name>data</Name>
        <PropertyPath>ProbabilityTracking::Top::EventInfo::Values</PropertyPath>
      </DataSource>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>
    <Trigger type="Element">
      <Name>Blob</Name>
      <When>Ends</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::Trial</ElementPath>
      <DataSource type="Property">
        <Name>data</Name>
        <PropertyPath>ProbabilityTracking::Top::TrialInfo::Values</PropertyPath>
      </DataSource>
    </Trigger>
    <Trigger type="Signal">
      <Name>eye</Name>
      <SignalName>Position</SignalName>
      <DataSource type="Signal">
        <Name>data</Name>
        <SignalName>Position</SignalName>
      </DataSource>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>
    <Trigger type="Signal">
      <Name>diam</Name>
      <SignalName>Diameter</SignalName>
      <DataSource type="Signal">
        <Name>data</Name>
        <SignalName>Diameter</SignalName>
      </DataSource>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>
    <Trigger type="Element">
      <Name>beginTrial</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::Trial</ElementPath>
      <DataSource type="Property">
        <Name>trialInSeq</Name>
        <PropertyPath>ProbabilityTracking::Top::Superblock::Block::TrialsSoFar::Value</PropertyPath>
      </DataSource>
    </Trigger>
    <Tool type="File">
      <Name>blobFile</Name>
      <FileName>.blob.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>eventFile</Name>
      <FileName>.event.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>eyeFile</Name>
      <FileName>.eye.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>diamFile</Name>
      <FileName>.joy.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>blobFileCorrect</Name>
      <FileName>.blob.correct.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>eventFileCorrect</Name>
      <FileName>.event.correct.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>eyeFileCorrect</Name>
      <FileName>.eye.correct.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>diamFileCorrect</Name>
      <FileName>.joy.correct.txt</FileName>
    </Tool>
    <Tool type="NumericVariable">
      <Name>correctTrialNum</Name>
      <InitValue>0</InitValue>
    </Tool>
  </Period>
  <Period>
    <Name>TestPeriod</Name>
    <StartBufferMs>1000</StartBufferMs>
    <EndBufferMs>1000</EndBufferMs>
    <Script>      
      wasCorrect = false;
      for(i=0;i&lt;correct.length;i++)
      {
      if(correct.time.value(i)>Number(startTime))
        wasCorrect = true;
      }

      for(i=0;i&lt;spike.length;i++)
      {
       spikeFile.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+Math.round(1000*(spike.time.value(i)-Number(startTime)))
      +&quot;,&quot;+spike.data.channel(i)
      +&quot;,&quot;+spike.data.unit(i)
      +&quot;,&quot;+"-1000"
       +&quot;,&quot;+Math.round(1000*(Number(endTime)-Number(startTime)))
      );
      waveFile.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+spike.data.channel(i)
      +&quot;,&quot;+spike.data.unit(i)
      +&quot;,&quot;+Math.round(1000*(spike.time.value(i)-Number(startTime)))
      +&quot;,&quot;+Math.round(1000000000*spike.data.samplePeriod(i))/1000000
      +&quot;,&quot;+spike.data.waveSize(i)
      +&quot;,&quot;+spike.data.wave(i)
      );

      if(wasCorrect)
      {
      spikeFileCorrect.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+Math.round(1000*(spike.time.value(i)-Number(startTime)))
      +&quot;,&quot;+spike.data.channel(i)
      +&quot;,&quot;+spike.data.unit(i)
      +&quot;,&quot;+"-1000"
      +&quot;,&quot;+Math.round(1000*(Number(endTime)-Number(startTime)))
      );
      waveFileCorrect.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      +&quot;,&quot;+correctTrialNum.value
      +&quot;,&quot;+spike.data.channel(i)
      +&quot;,&quot;+spike.data.unit(i)
      +&quot;,&quot;+Math.round(1000*(spike.time.value(i)-Number(startTime)))
      +&quot;,&quot;+Math.round(1000000000*spike.data.samplePeriod(i))/1000000
      +&quot;,&quot;+spike.data.waveSize(i)
      +&quot;,&quot;+spike.data.wave(i)
      );
      }
      }

      //for(i=0;i&lt;lfp.length;i++)
      //{
      //lfpFile.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      //+&quot;,&quot;+correctTrialNum.value
      //+&quot;,&quot;+lfp.data.channel(i)
      //+&quot;,&quot;+Math.round(1000*(lfp.time.value(i)-Number(startTime)))
      //+&quot;,&quot;+lfp.data.value(i)
      //);
      //if(wasCorrect)
      //{
      //lfpFileCorrect.writeLine(&quot;&quot;+(Number(periodNumber)+1)
      //+&quot;,&quot;+correctTrialNum.value
      //+&quot;,&quot;+lfp.data.channel(i)
      //+&quot;,&quot;+Math.round(1000*(lfp.time.value(i)-Number(startTime)))
      //+&quot;,&quot;+lfp.data.value(i)
      //);
      //}
      //}
      if(wasCorrect)
        correctTrialNum.value++;

    </Script>
    <StartTrigger type="Element">
      <Name>start</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::Trial</ElementPath>
    </StartTrigger>
    <EndTrigger type="Element">
      <Name>end</Name>
      <When>Ends</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::ReshuffleTrialType</ElementPath>
    </EndTrigger>
    <EndTrigger type="Element">
      <Name>end</Name>
      <When>Ends</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::NeedsMoreTrials</ElementPath>
    </EndTrigger>
    <Trigger type="Spike">
      <Name>spike</Name>
      <DataSource type="Spike">
        <Name>data</Name>
        <ScaleFactor>1000</ScaleFactor>
        <DecimalPlaces>6</DecimalPlaces>
      </DataSource>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>
    <Trigger type="Element">
      <Name>correct</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::NeedsMoreTrials</ElementPath>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>
    <Trigger type="Element">
      <Name>beginTrial</Name>
      <When>Starts</When>
      <ElementPath>ProbabilityTracking::Top::Superblock::Block::Trial</ElementPath>
      <DataSource type="Property">
        <Name>trialInSeq</Name>
        <PropertyPath>ProbabilityTracking::Top::Superblock::Block::TrialsSoFar::Value</PropertyPath>
      </DataSource>
    </Trigger>
    <!--<Trigger type="LFP">
      <Name>lfp</Name>
      <DataSource type="LFP">
        <Name>data</Name>
      </DataSource>
      <DataSource type="Time">
        <Name>time</Name>
      </DataSource>
    </Trigger>-->
    <Tool type="File">
      <Name>spikeFile</Name>
      <FileName>.spikes.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>waveFile</Name>
      <FileName>.wave.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>lfpFile</Name>
      <FileName>.lfp.all.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>spikeFileCorrect</Name>
      <FileName>.spikes.correct.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>waveFileCorrect</Name>
      <FileName>.wave.correct.txt</FileName>
    </Tool>
    <Tool type="File">
      <Name>lfpFileCorrect</Name>
      <FileName>.lfp.correct.txt</FileName>
    </Tool>
    <Tool type="NumericVariable">
      <Name>correctTrialNum</Name>
      <InitValue>0</InitValue>
    </Tool>
  </Period>
</AnalysisDefinition>