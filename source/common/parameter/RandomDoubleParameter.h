#ifndef _RANDOMDOUBLEPARAMETER_H_
#define _RANDOMDOUBLEPARAMETER_H_

#include "../common.h"

#include "parameter.h"
#include "../random/MersenneTwister.h"

namespace Picto {

/*!	\brief A Parameter for selecting Random floating point values
 *	\details Random values are generated when randomize() is called and available in the "value" script
 *	property.  The "value" script property can also be set to another value that will stay there until
 *	randomize() is called again, a new value is set to it or the RandomDoubleParameter re-enters scope.
 *	Random values generated by this function are between its "Min" (>=) and "Max" (<) Property Values.
 *	Seed functionality is also provided in case a reproducable series of random numbers is desired. 
 *	\note In many cases, it is possible simply to use the javascript \code Math.random() \endcode function
 *	to produce a simple random number.  The produced number in that case will not be recorded though unless
 *	it is manually set to some Picto element value.
 *
 *	\author Trevor Stavropoulos, Joey Schnurr, Mark Hammond, Matt Gay
 *	\date 2009-2015
 */
#if defined WIN32 || defined WINCE
	class PICTOLIB_API RandomDoubleParameter : public Parameter
#else
class RandomDoubleParameter : public Parameter
#endif
{
	Q_OBJECT
	/*! \brief Returns the latest random value that was selected when randomize() was called.
	 *	\details Setting this value is also possible and will cause the set value to be returned from the value
	 *	script property until it is manually changed, or randomize() is next called.
	*/
	Q_PROPERTY(double value READ getValue WRITE setValue)
public slots:
	void randomize();

public:
	RandomDoubleParameter();
	virtual ~RandomDoubleParameter(){};

	static Parameter* NewParameter();
	static QSharedPointer<Asset> Create();
	/*! \brief Returns the latest random value that was selected when randomize() was called
	 *	or that was set using setValue()
	*/
	double getValue(){return propertyContainer_->getPropertyValue("Value").toDouble();};
	/*! \brief Sets the value that will be returned from getValue() until this function or randomize() is 
	 *	next called.
	*/
	void setValue(double val){propertyContainer_->setPropertyValue("Value",val);};

	virtual QString friendlyTypeName(){return "Random Float";};
	virtual QString getUITemplate(){return "PseudorandomFloat";};
	
	virtual bool valuesAreValid(QString& warning = QString());
	virtual void fixValues();

protected:
	virtual void postDeserialize();
	virtual bool validateObject(QSharedPointer<QXmlStreamReader> xmlStreamReader);

private:
	void checkForPropertyChanges();
	MTRand mtRand_;
	bool useSeed_;
	int seed_;
	double value_;
	QString units_;
};


}; //namespace Picto

#endif
