#ifndef _PROPERTY_H_
#define _PROPERTY_H_

#include <QtVariantProperty.h>
#include <QVariant>
#include <QString>
#include <QMap>
#include <QXmlStreamWriter>
#include <QSharedPointer>

#include "../common.h"
#include "../storage/Asset.h"

namespace Picto {
class PropertyContainer;
/*!	\brief Describes the property of an object
 *
 *	Many objects in Picto have properties (e.g. a circle has properties of color 
 *	radius, and location).  The Property object allows us to assign properties to 
 *	objects.
 */
#if defined WIN32 || defined WINCE
	class PICTOLIB_API Property : public Asset
#else
class Property : public Asset
#endif
{
	Q_OBJECT
public:
	virtual ~Property();
	int type();
	QString getName();
	//virtual void setValue(QVariant _value);
	void setAttribute(QString _attributeName, QVariant _attributeValue);
	QVariant attributeValue(QString _attributeName) const;
	QStringList getAttributes(){return attributes_.keys();};

	//QtVariantProperty* getVariantProperty(){return variantProp_;};
	QVariant saveValue();
	virtual void setSaveValue(QVariant _value);

	QVariant initValue();
	virtual void setInitValue(QVariant _value);

	QVariant value();
	virtual void setValue(QVariant _value);

	//Set this property as changeable during runtime.
	void setRuntimeEditable(bool enabled = true){runtimeEnabled_ = enabled;};
	bool isRuntimeEnabled(){return runtimeEnabled_;};

	virtual bool serializeAsXml(QSharedPointer<QXmlStreamWriter> xmlStreamWriter);
	virtual bool deserializeFromXml(QSharedPointer<QXmlStreamReader> xmlStreamReader, bool validate);

	//This is the string that is sent over the network and written into the session database.
	virtual QString toUserString();
	//This updates the property value from a string generated by toUserString().
	virtual void fromUserString(QString userString);

	virtual QString identifier(){return tagName_;};
	virtual QString assetType(){return "Property";};

	virtual	int getAssetId();
	virtual void setAssetId(int id);

	static bool encounteredObsoleteSerialSyntax(){return hadObsoleteSerialSyntax_;};
	static void clearObsoleteSerialSyntax(){hadObsoleteSerialSyntax_ = false;};

signals:
	void saveValueChanged(QSharedPointer<Property> changedProp);
	void initValueChanged(QSharedPointer<Property> changedProp);
	void valueChanged(QSharedPointer<Property> changedProp);
public slots:
	void setValueFromProp(QSharedPointer<Property> prop);

protected:
	Property(int type, QString name, QVariant value);

	//Converts the input variant value to a string
	virtual QString variantToString(QVariant value) const;
	//Converts the input string to a variant
	virtual QVariant stringToVariant(QString string, QString& error) const;
	//In some cases, older versions of Picto data files included tags with
	//properties and no string data.  This function builds a variant value
	//based on attributes that were serialized in.
	virtual QVariant attributeMapToVariantValue(QMap<QString,QVariant> attrMap, QString& error) const;

private:
	friend class PropertyContainer;
	//Handle XML attributes that need to be serialized in and out
	void AddSerializationAttribute(QString name);
	void SetSerializationAttributeValue(QString name, QVariant _value);
	QVariant GetSerializationAttributeValue(QString name);
	QMap<QString,QVariant> serializationAttributes_;
	void addSubProperty(QSharedPointer<Property> prop);
	void setName(QString name);
	int index_;
	QString tagName_;
	QString tagText_;
	QString typeVal_; // In cases where a Asset Factory used a type attribute to choose between types, a type that we don't use but need to write out would be in the tag.
	bool scriptEditable_;
	bool runtimeEnabled_;
	int assetId_;
	QVariant saveValue_;
	QVariant initValue_;
	QVariant value_;
	int type_;
	QString name_;
	QMap<QString,QVariant> attributes_;
	bool serialSyntaxUpgraded_;
	static bool hadObsoleteSerialSyntax_;

//private slots:
//	void valueChanged(QtProperty *property, const QVariant &val);
//    void attributeChanged(QtProperty *property,
//                const QString &attribute, const QVariant &val);
};


}; //namespace Picto

#endif
