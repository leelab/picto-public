/*! \page user_files Understand Picto User Files
Picto applications make use of a number of files for storing configurations, session data, experimental designs and more.  The various files used by Picto appear below.

\section design_file The .xml Design File
This file stores an XML serialized version of the Experiment / Analysis code designed in the StateEditViewer.  The file is split into multiple sections:
	- Experiment: This includes the serialized Experiment and its child Task objects.  
	- Analysis: There may be none or many Analyses defined.  Each Analysis is defined under its own Analysis tag, and each child of Analysis includes information pointing to the Experimental element to which it is attached.  
	- UIData: These define the appearance of the elements of the Experiment and Analysis trees within the StateEditViewer.  There is one UIData tag for each Analysis tag and the Experiment tag.  The UI information is separated from the functional design since it is necessary only for development purposes.

\section session_file The .sqlite Session File
Session files include all data needed to reproduce an Experimental session.  They are stored on the Picto Server in a "sessions" directory located in the directory above the bin folder.  The Session file is written in the sqlite format, such that it can be queried using SQL commands from our C++ code or a third part sqlite reader application like SqliteSpy (http://www.yunqa.de/delphi/doku.php/products/sqlitespy/index).  It is very useful to install a 3rd party sqlite reader on a Picto development machine for debugging purposes.  It should also be noted that while many of the tables in the Session file include timestamps, others are indexed only according to the frame before which they occured.  In cases like these, a DataId field, common to most of the tables, can be used to retrieve the order in which these events occured.  The DataID is an increasing value that is generated at the time that each data unit is generated on the Director and Proxy.  This means that within a particular component (Director or Proxy), the DataId can be used to determine ordering, but DataIds for values coming from the Director cannot be compared to those of values comming from the Proxy.  The tables in the .sqlite Session file are as follows:
	- alignevents - Includes all aligned alignment events, with their time in the behavioral and neural time streams plus information about their closeness to the current timestream alignment fit line.
	- behavioralalignevents - Includes all alignment events that have been received from the Director.
	- componentinfo - Includes information about the components (Director, Proxy) being used in this Session.
	- currentstate - Includes the latest values of all Properties in the Experiment.  These are stored in case the Server crashes and needs to reconnect quickly to a Session that was in progress.  This table is not necessary for Session Analysis since all of its information can be found in other tables.
	- elementlookup - This is a lookup table that can be used to acces an Experimental element's path based on its AssetId.
	- frames - Includes every frame presented in the Session and that time at which its first phosphor appeared.
	- initproperties - Every time the initValue of a Property changes, its new value is recorded here, along with the Property's AssetId and the FrameId of the frame before which the value changed.  A Property initValue is the value to which its runValue is set whenever the Property's parent enters scope.  During a session, these values are changed by the operator in the RemoteViewer.
	- lfp - Contains all LFP data in binary blocks (to save disk space/disk write time) indexed by the block timestamp and the channel of the lfp data.
	- neuralalignevents - Includes all alignment events that have been received from the Proxy.
	- properties -  Every time the runValue of a Property changes, its new value is recorded here, along with the Property's AssetId and the FrameId of the frame before which the value changed.
	- propertylookup - This is a lookup table that can be used to access a Property name and the AssetId of its parent element based on the Property's AssetId.  The parent element can be looked up in the elementlookup table.
	- rewards - Contains the time, duration and reward channel of every reward provided during the Session, including those provided directly by the Operator from the RemoteViewer reward button or the reward buttons on the Pictobox.
	- runs - Contains information about every time a Task was run, including the first and last frame ids, the name and notes saved by the Operator, and whether the Operator marked the Run as saved.
	- sessioninfo - Includes various simple pieces of information about the Session as a whole in a simple key/value lookup table.  Some information stored here is the time when the Session started, the XML code defining the Design used in the Session, which Signal channels were used in the Session and their characteristics, which RemoteViewer instances where authorized to control the Session, etc.
	- signal_position - For each input signal, a table is created called "signal_?" where ? is the name of the signal.  Stored data includes the frame after which the data was read, the offsettime from the frame presentation time at which the first sample was read, a binary string of sample readings, and the period of sample readings in milliseconds.
	- spikes - This table includes one row for every neural spike detected during the experiment along with its timestamp, channel, unit and waveform.
	- transitionlookup - This is a lookup table that is used to lookup a Transition element's parent AssetId and its source, source result, and destination names.  The parent element can be looked up in the elementlookup table.
	- transitions - This table includes the AssetId of every Transition that was traversed during a Session along with the FrameId of the Frame after which the Transition was traversed.
\section config_file The .config Files
These files are stored in the config directory (at the level above the bin directory) are used to store non-vital configuration data about the various Picto Applications.  The Director, Proxy and Workstation store their id numbers in these files.  The Server stores information about open sessions in these files in case it needs to return to an open session after a server crash, or end a session that hasn't shown activity in a long time.  If things are acting screwy and you want to really REALLY reset the Picto system, just delete all of these .config files and they will be rebuilt from scratch.  It should be noted however, that for various reasons, in some cases configuraitons are stored in the registry using a QSettings object.  This information includes things like the default reward durations on the Director and the current system number of the various applications.  It shouldn't be necessary to delete these things even in a serious reset, but again, if you did, it wouldn't be hugely significant.
\section temp_files Temporary Files
Various temporary files are stored in various directories under the directory containing the bin folder.  These store things like AnalysisOutput files before they are saved to a user defined disk path, automatic Design file backups in case of a Workstation crash, temporary audio files extracted from an Experimental design on the Director, etc.  These files are automatically created and deleted by picto and shouldn't concern anyone.
 
*/
